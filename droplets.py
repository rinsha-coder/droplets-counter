# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XZ19BX3ff-wk1DlIKGFkixf3MvJjAyU9
"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow
from google.colab import files

print("Upload an image of water droplets on glass")
uploaded = files.upload()
image_path = list(uploaded.keys())[0]

image = cv2.imread(image_path)
if image is None:
    raise ValueError("Failed to load image.")

gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
blurred = cv2.GaussianBlur(gray, (5, 5), 0)

blob_params = cv2.SimpleBlobDetector_Params()
blob_params.filterByArea = True
blob_params.minArea = 10
blob_params.maxArea = 10000

blob_params.filterByCircularity = False
blob_params.filterByConvexity = False
blob_params.filterByInertia = False

blob_detector = cv2.SimpleBlobDetector_create(blob_params)
blob_keypoints = blob_detector.detect(blurred)

blob_centers = [tuple(map(int, kp.pt)) for kp in blob_keypoints]

_, thresh = cv2.threshold(blurred, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

combined_centers = []
output = image.copy()

for contour in contours:
    area = cv2.contourArea(contour)
    if area > 30:
        (x, y), radius = cv2.minEnclosingCircle(contour)
        center = (int(x), int(y))

        is_duplicate = any(np.linalg.norm(np.array(center) - np.array(bc)) < 10 for bc in blob_centers)
        if not is_duplicate:
            combined_centers.append(center)

total_droplets = len(blob_keypoints) + len(combined_centers)

print(f"Total droplets detected: {total_droplets}")
cv2_imshow(output)